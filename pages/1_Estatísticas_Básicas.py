import streamlit as st
import pandas as pd
import numpy as np # Importar numpy para a fun√ß√£o .mode() e outras opera√ß√µes

st.set_page_config(page_title="Estat√≠sticas B√°sicas", page_icon="üìà")

st.markdown("# Estat√≠sticas B√°sicas de Profici√™ncia")
st.sidebar.header("Op√ß√µes de Estat√≠stica")

# --- Leitura e Pr√©-processamento dos Dados ---
file_path = 'data/raw_data/df_es_filtrado.csv'
try:
    df_es_filtrado = pd.read_csv(file_path, sep=",")
except FileNotFoundError:
    st.error(f"Erro: O arquivo '{file_path}' n√£o foi encontrado. Verifique o caminho.")
    st.stop()
except Exception as e:
    st.error(f"Ocorreu um erro ao carregar o arquivo CSV: {e}")
    st.stop()

# Verificar se as colunas essenciais existem
required_cols = ['NU_TIPO_NIVEL_INSE', 'PROFICIENCIA_LP_SAEB', 'PROFICIENCIA_MT_SAEB']
missing_columns = [col for col in required_cols if col not in df_es_filtrado.columns]

if missing_columns:
    st.error(f"Erro: As seguintes colunas necess√°rias n√£o foram encontradas no arquivo CSV: {', '.join(missing_columns)}. Verifique o dicion√°rio de dados e o arquivo.")
    st.stop()

# For√ßar colunas de profici√™ncia e INSE a serem num√©ricas, tratando erros para NaN
df_es_filtrado['PROFICIENCIA_LP_SAEB'] = pd.to_numeric(df_es_filtrado['PROFICIENCIA_LP_SAEB'], errors='coerce')
df_es_filtrado['PROFICIENCIA_MT_SAEB'] = pd.to_numeric(df_es_filtrado['PROFICIENCIA_MT_SAEB'], errors='coerce')
df_es_filtrado['NU_TIPO_NIVEL_INSE'] = pd.to_numeric(df_es_filtrado['NU_TIPO_NIVEL_INSE'], errors='coerce')

# Remover linhas com valores nulos nas colunas essenciais para as estat√≠sticas
df_es_filtrado.dropna(subset=['NU_TIPO_NIVEL_INSE', 'PROFICIENCIA_LP_SAEB', 'PROFICIENCIA_MT_SAEB'], inplace=True)

if df_es_filtrado.empty:
    st.warning("Ap√≥s o pr√©-processamento, n√£o h√° dados v√°lidos para calcular as estat√≠sticas. Verifique as colunas de INSE e profici√™ncias.")
    st.stop()

# Mapeamento para exibir os n√≠veis do INSE como strings (para r√≥tulos da tabela)
inse_display_labels = {
    1: 'N√≠vel I', 2: 'N√≠vel II', 3: 'N√≠vel III', 4: 'N√≠vel IV',
    5: 'N√≠vel V', 6: 'N√≠vel VI', 7: 'N√≠vel VII', 8: 'N√≠vel VIII'
}

# --- C√°lculo da Tabela de M√≠nimos e M√°ximos ---
socioeconomic_min_max_stats = df_es_filtrado.groupby('NU_TIPO_NIVEL_INSE').agg(
    min_lp=('PROFICIENCIA_LP_SAEB', 'min'),
    max_lp=('PROFICIENCIA_LP_SAEB', 'max'),
    min_mt=('PROFICIENCIA_MT_SAEB', 'min'),
    max_mt=('PROFICIENCIA_MT_SAEB', 'max')
)
socioeconomic_min_max_stats = socioeconomic_min_max_stats.sort_index()
# Mapear o √≠ndice num√©rico do INSE para r√≥tulos de string para exibi√ß√£o
socioeconomic_min_max_stats.index = socioeconomic_min_max_stats.index.map(lambda x: inse_display_labels.get(x, str(x)))

# Renomear colunas para a tabela de M√≠nimos e M√°ximos
socioeconomic_min_max_stats = socioeconomic_min_max_stats.rename(columns={
    'min_lp': 'M√≠nimo LP',
    'max_lp': 'M√°ximo LP',
    'min_mt': 'M√≠nimo MT',
    'max_mt': 'M√°ximo MT'
})

# --- Definir o nome do √≠ndice para exibi√ß√£o na tabela ---
socioeconomic_min_max_stats.index.name = "N√≠vel Socioecon√¥mico"


# --- C√°lculo da Tabela de M√©dia, Mediana e Moda ---
socioeconomic_mean_median_mode_stats = df_es_filtrado.groupby('NU_TIPO_NIVEL_INSE').agg(
    mean_lp=('PROFICIENCIA_LP_SAEB', 'mean'),
    median_lp=('PROFICIENCIA_LP_SAEB', 'median'),
    # A moda pode retornar m√∫ltiplos valores, pegamos o primeiro se existir
    mode_lp=('PROFICIENCIA_LP_SAEB', lambda x: x.mode()[0] if not x.mode().empty else np.nan),
    mean_mt=('PROFICIENCIA_MT_SAEB', 'mean'),
    median_mt=('PROFICIENCIA_MT_SAEB', 'median'),
    mode_mt=('PROFICIENCIA_MT_SAEB', lambda x: x.mode()[0] if not x.mode().empty else np.nan)
)
socioeconomic_mean_median_mode_stats = socioeconomic_mean_median_mode_stats.sort_index()
socioeconomic_mean_median_mode_stats = socioeconomic_mean_median_mode_stats.round(2)
# Mapear o √≠ndice num√©rico do INSE para r√≥tulos de string para exibi√ß√£o
socioeconomic_mean_median_mode_stats.index = socioeconomic_mean_median_mode_stats.index.map(lambda x: inse_display_labels.get(x, str(x)))

# Renomear colunas para a tabela de M√©dia, Mediana e Moda
socioeconomic_mean_median_mode_stats = socioeconomic_mean_median_mode_stats.rename(columns={
    'mean_lp': 'M√©dia LP',
    'median_lp': 'Mediana LP',
    'mode_lp': 'Moda LP',
    'mean_mt': 'M√©dia MT',
    'median_mt': 'Mediana MT',
    'mode_mt': 'Moda MT'
})

# --- Definir o nome do √≠ndice para exibi√ß√£o na tabela ---
socioeconomic_mean_median_mode_stats.index.name = "N√≠vel Socioecon√¥mico"


# --- Sele√ß√£o do Tipo de Estat√≠stica na Barra Lateral ---
selected_stat_type = st.sidebar.radio(
    "Selecione o tipo de estat√≠stica a exibir:",
    ("M√≠nimo e M√°ximo", "M√©dia, Mediana e Moda")
)

# --- Exibi√ß√£o Condicional da Tabela ---
if selected_stat_type == "M√≠nimo e M√°ximo":
    st.write("### Profici√™ncia: M√≠nimos e M√°ximos por N√≠vel Socioecon√¥mico")
    st.markdown(
        """
        Esta tabela apresenta os valores m√≠nimos e m√°ximos de profici√™ncia em L√≠ngua Portuguesa e Matem√°tica
        para cada n√≠vel socioecon√¥mico (INSE) dos estudantes.
        """
    )
    st.dataframe(socioeconomic_min_max_stats)
else: # selected_stat_type == "M√©dia, Mediana e Moda"
    st.write("### Profici√™ncia: M√©dia, Mediana e Moda por N√≠vel Socioecon√¥mico")
    st.markdown(
        """
        Esta tabela exibe a m√©dia, mediana e moda da profici√™ncia em L√≠ngua Portuguesa e Matem√°tica,
        separadas por n√≠vel socioecon√¥mico (INSE) dos estudantes. Todos os valores s√£o arredondados para duas casas decimais.
        """
    )
    st.dataframe(socioeconomic_mean_median_mode_stats)

# --- Informa√ß√µes Adicionais para o Streamlit ---
st.write("---")
st.markdown(
    """
    As tabelas fornecem uma vis√£o sumarizada do desempenho dos estudantes nas avalia√ß√µes do SAEB, permitindo
    a compara√ß√£o das estat√≠sticas de profici√™ncia entre os diferentes estratos socioecon√¥micos.
    """
)
